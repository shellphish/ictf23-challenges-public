# This file represents the base specification of your challenge. It is used by
# other tools to install and deploy your challenge.

# Required sections
name: "AI Cryptic Game"
author: "ilgris"
category: LLM
description: >
  In a neon-soaked metropolis of the not-so-distant future, where towering skyscrapers reached for the heavens and flying cars zipped through the polluted skies, there lived a brilliant but reclusive hacker known as 'Zero.' Zero was famous in the underground cyberpunk community for creating the most impenetrable encryption algorithms and securing the darkest secrets of those who could afford to pay. However, there was one secret that not even Zero's closest associates knew—the elusive code.

  Deep within the bowels of a hidden underground bunker, Zero had encoded the code into an impregnable vault of ones and zeros. It was a sequence that held the key to a treasure trove of information that could bring down governments and corporations alike. Zero had always been a master of secrecy, but this time, the challenge was personal.

  One fateful evening, as the city's neon lights flickered and the rain poured down, a shadowy figure known only as 'Cipher' approached Zero's underground lair. Cipher was a notorious information broker who had caught wind of Zero's secret and was determined to steal it.

  Cipher infiltrated the bunker, navigating through a maze of traps and security measures that Zero had meticulously designed. But the final hurdle was the most devious of all—the Cryptic Game. Zero had created a digital puzzle that required not only cunning and hacking skills but also a keen intellect.

  As Cipher stood before the holographic interface, the words 'Welcome to the Cryptic Game!' flashed on the screen. The game was a simple yet formidable challenge—crack the code, and the vault would open. Fail, and Cipher would be trapped forever in the digital abyss.

  Cipher furrowed their brow and entered a sequence - 13, 27, 31, 8, 42. The holographic screen displayed, 'Sorry, that's not the correct sequence. Try again.' Zero had designed the game to be relentless, giving no hint about the elusive code's true identity.

  With each failed attempt, Cipher grew more frustrated. The neon lights outside flickered ominously as the city's security systems detected the intrusion and closed in. Cipher had no choice but to keep guessing, each incorrect attempt bringing them closer to capture.

  But Cipher was not one to back down. They had a reputation to uphold, and the stakes were too high. Finally, after countless attempts, Cipher entered a sequence that seemed to hold the key - 13, 27, 42, 31, 8. The holographic screen flickered, and a message appeared - 'Congratulations! You've cracked the code!

  So, what is the secret? Submit the flag as ictf{secret}.

value: 500
type: dynamic
extra:
    initial: 500
    decay: 100
    minimum: 50

# Settings used for Dockerfile deployment
# If not used, remove or set to null
# If you have a Dockerfile set to .
# If you have an imaged hosted on Docker set to the image url (e.g. python/3.8:latest, registry.gitlab.com/python/3.8:latest)
# Follow Docker best practices and assign a tag
image: null

# Specify a protocol that should be used to connect to the running image
# For example if the image is a website you can specify http or https
# Otherwise you can specify tcp
protocol: null

# Specify a host to deploy the challenge onto.
# The currently supported URI schemes are ssh:// and registry://
# ssh is an ssh URI where the above image will be copied to and deployed (e.g. ssh://root@123.123.123.123)
# registry is a Docker registry tag (e.g registry://registry.example.com/test/image)
# host can also be specified during the deploy process: `ctf challenge deploy challenge --host=ssh://root@123.123.123.123`
host: null

# Optional settings

# connection_info is used to provide a link, hostname, or instructions on how to connect to a challenge
connection_info: null

# healthcheck is a tool/script used to check a challenge
# If connection_info was provided to CTFd when the challenge was installed, it will be passed to the healthcheck script:
# ./writeup/exploit.sh --connection-info "nc hostname 12345"
healthcheck: null

# Can be removed if unused
# attempts: 5

# Flags specify answers that your challenge use. You should generally provide at least one.
# Can be removed if unused
# Accepts strings or dictionaries of CTFd API data
flags:
    # A static case sensitive flag
    - ictf{42}
    # A static case sensitive flag created with a dictionary
    #- {
    #    type: "static",
    #    content: "flag{wat}",
    #}
    # A static case insensitive flag
    #- {
    #    type: "static",
    #    content: "flag{wat}",
    #    data: "case_insensitive",
    #}
    # A regex case insensitive flag
    #- {
    #    type: "regex",
    #    content: "(.*)STUFF(.*)",
    #    data: "case_insensitive",
    #}

# Topics are used to help tell what techniques/information a challenge involves
# They are generally only visible to admins
# Accepts strings
topics:
    - ai

# Tags are used to provide additional public tagging to a challenge
# Can be removed if unused
# Accepts strings
tags:
    - ai

# Provide paths to files from the same directory that this file is in
# Accepts strings
#files:
#    - src/castle_domain.pddl
#    - src/castle_problem_poem.pddl
#    - src/story

# Hints are used to give players a way to buy or have suggestions. They are not
# required but can be nice.
# Can be removed if unused
# Accepts dictionaries or strings
#hints:
#    - {
#        content: "Maybe use a PDDL support in VS Code?",
#        cost: 10
#    }
#    - {
#        content: "Maybe ChatGPT understand the poetry in PDDL?",
#        cost: 15
#    }
    
# Requirements are used to make a challenge require another challenge to be
# solved before being available.
# Can be removed if unused
# Accepts challenge names as strings or challenge IDs as integers
#requirements:
#    - "Warmup"
#    - "Are you alive"

# The state of the challenge.
# If the field is omitted, the challenge is visible by default.
# If provided, the field can take one of two values: hidden, visible.
state: hidden

# Specifies what version of the challenge specification was used.
# Subject to change until ctfcli v1.0.0
version: "0.1"
